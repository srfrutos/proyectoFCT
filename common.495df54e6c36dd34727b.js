(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{CPIe:function(e,t,s){"use strict";s.d(t,"a",function(){return n});var o=s("mrSG"),c=s("lJxs"),a=s("fXoL"),i=s("I/3d");let n=(()=>{class e{constructor(e){this.afs=e,this.cardsCollection=e.collection("cards"),this.decksCollection=e.collection("decks"),this.getDecks(),this.getCards()}getCards(){this.cards=this.cardsCollection.snapshotChanges().pipe(Object(c.a)(e=>e.map(e=>e.payload.doc.data())))}getCard(e){return this.cardsCollection.doc(e).snapshotChanges().pipe(Object(c.a)(e=>{if(e.payload.exists){const t=e.payload.data();return Object.assign({nameCard:e.payload.id},t)}}))}handleError(e){throw new Error("Method not implemented.")}deleteDecks(e){return new Promise((t,s)=>Object(o.b)(this,void 0,void 0,function*(){try{yield this.decksCollection.doc(e).delete()}catch(t){s(t.message)}}))}saveDecks(e,t){return new Promise((s,c)=>Object(o.b)(this,void 0,void 0,function*(){try{const s=t||this.afs.createId(),o=Object.assign({id:s},e);yield this.decksCollection.doc(s).set(o)}catch(s){c(s.message)}}))}getDecks(){this.decks=this.decksCollection.snapshotChanges().pipe(Object(c.a)(e=>e.map(e=>e.payload.doc.data())))}}return e.\u0275fac=function(t){return new(t||e)(a.Xb(i.a))},e.\u0275prov=a.Jb({token:e,factory:e.\u0275fac,providedIn:"root"}),e})()}}]);